import { LANG_CHANGED_EVENT } from "./config";
import { extract, interpolate, lookup } from "./helpers";
/**
 * Default configuration object.
 */
export const defaultTranslateConfig = () => {
    return {
        loader: () => Promise.resolve({}),
        empty: key => `[${key}]`,
        lookup: lookup,
        interpolate: interpolate,
        translationCache: {}
    };
};
// The current configuration.
export let translateConfig = defaultTranslateConfig();
/**
 * Registers a translation config.
 * @param config
 */
export function registerTranslateConfig(config) {
    return (translateConfig = Object.assign(Object.assign({}, translateConfig), config));
}
/**
 * Dispatches a language changed event.
 * @param detail
 */
export function dispatchLangChanged(detail) {
    window.dispatchEvent(new CustomEvent(LANG_CHANGED_EVENT, { detail }));
}
/**
 * Updates the configuration object with a new language and strings.
 * Then dispatches that the language has changed.
 * @param newLang
 * @param newStrings
 * @param config
 */
export function updateLang(newLang, newStrings, config = translateConfig) {
    dispatchLangChanged({
        previousStrings: config.strings,
        previousLang: config.lang,
        lang: (config.lang = newLang),
        strings: (config.strings = newStrings)
    });
}
/**
 * Listens for changes in the language.
 * Returns a method for unsubscribing from the event.
 * @param callback
 * @param options
 */
export function listenForLangChanged(callback, options) {
    const handler = (e) => callback(e.detail);
    window.addEventListener(LANG_CHANGED_EVENT, handler, options);
    return () => window.removeEventListener(LANG_CHANGED_EVENT, handler);
}
/**
 * Sets a new current language and dispatches a global language changed event.
 * @param lang
 * @param config
 */
export async function use(lang, config = translateConfig) {
    // Load the translations and set the cache
    const strings = await config.loader(lang, config);
    config.translationCache = {};
    // Dispatch global language changed event while setting the new values
    updateLang(lang, strings, config);
}
/**
 * Translates a key and interpolates if values are defined.
 * Uses the current strings and translation cache to fetch the translation.
 * @param key (eg. "common.get_started")
 * @param values (eg. { count: 42 })
 * @param config
 */
export function get(key, values, config = translateConfig) {
    // Either use the translation from the cache or get it and add it to the cache
    let translation = config.translationCache[key]
        || (config.translationCache[key] = config.lookup(key, config) || config.empty(key, config));
    // Extract the values
    values = values != null ? extract(values) : null;
    // Interpolate the values and return the translation
    return values != null ? config.interpolate(translation, values, config) : translation;
}
//# sourceMappingURL=util.js.map