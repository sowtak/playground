const OFFLINE_VERSION=1,CACHE_NAME="offline",OFFLINE_URL="/offline.html";self.addEventListener("install",t=>{t.waitUntil(cacheOfflinePage()),self.skipWaiting()});async function cacheOfflinePage(){await(await caches.open(CACHE_NAME)).add(new Request(OFFLINE_URL,{cache:"reload"}))}self.addEventListener("activate",t=>{t.waitUntil(enableNavigationPreload()),self.clients.claim()});async function enableNavigationPreload(){"navigationPreload"in self.registration&&await self.registration.navigationPreload.enable()}self.addEventListener("fetch",t=>{t.request.mode==="navigate"&&t.respondWith(networkWithOfflineNavigationFallback(t))}),self.addEventListener("push",t=>{if(!t.data)return;const e=t.data.json();!e||t.waitUntil(showNotification(e))}),self.addEventListener("notificationclick",t=>{t.notification.close(),t.waitUntil(openNotificationsPage(t.notification.data))});async function showNotification(t){const e=notificationTitle(t),o=notificationBody(t);return self.registration.showNotification(e,{body:o,tag:t.id,timestamp:t.issuedAt,data:t,icon:location.origin+"/icons/logo-circle-512.png"}).then(()=>{if("setAppBadge"in navigator)return navigator.setAppBadge()})}async function openNotificationsPage(t){return clients.matchAll({type:"window"}).then(e=>{const o=notificationPathname(t);for(const n of e)if(n.url===o&&"focus"in n)return n.focus();for(const n of e)if(n.url==="/notifications"&&"focus"in n)return n.focus();for(const n of e){if("focused"in n&&n.focused)return n.navigate(o).then(i=>"focus"in i?i.focus():i);if("visibilityState"in n&&n.visibilityState==="visible")return n.navigate(o).then(i=>"focus"in i?i.focus():i)}if("openWindow"in clients)return clients.openWindow(o)}).then(e=>e.postMessage({type:"notificationclick",detail:t}).then(()=>{if("clearAppBadge"in navigator)return navigator.clearAppBadge()}))}function notificationPathname(t){return typeof t.postID=="string"&&t.postID!==""?"/posts/"+encodeURIComponent(t.postID):t.type==="follow"?"/@"+encodeURIComponent(t.actors[0]):"/notifications"}async function networkWithOfflineNavigationFallback(t){try{const e=await t.preloadResponse;return e||await fetch(t.request)}catch(e){return await(await caches.open(CACHE_NAME)).match(OFFLINE_URL)}}function notificationTitle(t){switch(t.type){case"follow":return"New follow";case"comment":return"New commented";case"post_mention":return"New post mention";case"comment_mention":return"New comment mention"}return"New notification"}function notificationBody(t){const e=()=>{const n=t.actors;switch(n.length){case 0:return"Someone";case 1:return n[0];case 2:return`${n[0]} and ${n[1]}`}return`${n[0]} and ${n.length-1} others`},o=()=>{switch(t.type){case"follow":return"followed you";case"comment":return"commented in a post";case"post_mention":return"mentioned you in a post";case"comment_mention":return"mentioned you in a comment"}return"did something"};return e()+" "+o()}
